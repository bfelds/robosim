define(['./ast'],
function(AST) {
    //This is a wrapper for the parser that is generated from PEGJS
    //Paste below

    //====== BEGINNING OF GENERATED PARSER FILE =======
    parser = (function(){
      /*
       * Generated by PEG.js 0.7.0.
       *
       * http://pegjs.majda.cz/
       */
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
         return '"' + s
          .replace(/\\/g, '\\\\')  // backslash
          .replace(/"/g, '\\"')    // closing quote character
          .replace(/\x08/g, '\\b') // backspace
          .replace(/\t/g, '\\t')   // horizontal tab
          .replace(/\n/g, '\\n')   // line feed
          .replace(/\f/g, '\\f')   // form feed
          .replace(/\r/g, '\\r')   // carriage return
          .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
          + '"';
      }
      
      var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function(input, startRule) {
          var parseFunctions = {
            "start": parse_start,
            "SourceCharacter": parse_SourceCharacter,
            "WhiteSpace": parse_WhiteSpace,
            "LineTerminator": parse_LineTerminator,
            "LineTerminatorSequence": parse_LineTerminatorSequence,
            "Comment": parse_Comment,
            "MultiLineComment": parse_MultiLineComment,
            "MultiLineCommentNoLineTerminator": parse_MultiLineCommentNoLineTerminator,
            "SingleLineComment": parse_SingleLineComment,
            "Identifier": parse_Identifier,
            "IdentifierName": parse_IdentifierName,
            "IdentifierStart": parse_IdentifierStart,
            "IdentifierPart": parse_IdentifierPart,
            "ReservedWord": parse_ReservedWord,
            "Keyword": parse_Keyword,
            "FutureReservedWord": parse_FutureReservedWord,
            "Literal": parse_Literal,
            "NullLiteral": parse_NullLiteral,
            "BooleanLiteral": parse_BooleanLiteral,
            "NumericLiteral": parse_NumericLiteral,
            "DecimalLiteral": parse_DecimalLiteral,
            "DecimalIntegerLiteral": parse_DecimalIntegerLiteral,
            "DecimalDigits": parse_DecimalDigits,
            "DecimalDigit": parse_DecimalDigit,
            "NonZeroDigit": parse_NonZeroDigit,
            "ExponentPart": parse_ExponentPart,
            "ExponentIndicator": parse_ExponentIndicator,
            "SignedInteger": parse_SignedInteger,
            "HexIntegerLiteral": parse_HexIntegerLiteral,
            "HexDigit": parse_HexDigit,
            "StringLiteral": parse_StringLiteral,
            "DoubleStringCharacters": parse_DoubleStringCharacters,
            "SingleStringCharacters": parse_SingleStringCharacters,
            "DoubleStringCharacter": parse_DoubleStringCharacter,
            "SingleStringCharacter": parse_SingleStringCharacter,
            "LineContinuation": parse_LineContinuation,
            "EscapeSequence": parse_EscapeSequence,
            "CharacterEscapeSequence": parse_CharacterEscapeSequence,
            "SingleEscapeCharacter": parse_SingleEscapeCharacter,
            "NonEscapeCharacter": parse_NonEscapeCharacter,
            "EscapeCharacter": parse_EscapeCharacter,
            "HexEscapeSequence": parse_HexEscapeSequence,
            "UnicodeEscapeSequence": parse_UnicodeEscapeSequence,
            "BreakToken": parse_BreakToken,
            "CaseToken": parse_CaseToken,
            "CatchToken": parse_CatchToken,
            "ContinueToken": parse_ContinueToken,
            "DebuggerToken": parse_DebuggerToken,
            "DefaultToken": parse_DefaultToken,
            "DeleteToken": parse_DeleteToken,
            "DoToken": parse_DoToken,
            "ElseToken": parse_ElseToken,
            "FalseToken": parse_FalseToken,
            "FinallyToken": parse_FinallyToken,
            "ForToken": parse_ForToken,
            "FunctionToken": parse_FunctionToken,
            "GetToken": parse_GetToken,
            "IfToken": parse_IfToken,
            "InstanceofToken": parse_InstanceofToken,
            "InToken": parse_InToken,
            "NewToken": parse_NewToken,
            "NullToken": parse_NullToken,
            "ReturnToken": parse_ReturnToken,
            "SetToken": parse_SetToken,
            "SwitchToken": parse_SwitchToken,
            "ThisToken": parse_ThisToken,
            "ThrowToken": parse_ThrowToken,
            "TrueToken": parse_TrueToken,
            "TryToken": parse_TryToken,
            "TypeofToken": parse_TypeofToken,
            "VarToken": parse_VarToken,
            "VoidToken": parse_VoidToken,
            "WhileToken": parse_WhileToken,
            "WithToken": parse_WithToken,
            "EOS": parse_EOS,
            "EOSNoLineTerminator": parse_EOSNoLineTerminator,
            "EOF": parse_EOF,
            "_": parse__,
            "__": parse___,
            "PrimaryExpression": parse_PrimaryExpression,
            "ArrayLiteral": parse_ArrayLiteral,
            "ElementList": parse_ElementList,
            "Elision": parse_Elision,
            "MemberExpression": parse_MemberExpression,
            "CallExpression": parse_CallExpression,
            "Arguments": parse_Arguments,
            "ArgumentList": parse_ArgumentList,
            "LeftHandSideExpression": parse_LeftHandSideExpression,
            "PostfixExpression": parse_PostfixExpression,
            "PostfixOperator": parse_PostfixOperator,
            "UnaryExpression": parse_UnaryExpression,
            "UnaryOperator": parse_UnaryOperator,
            "MultiplicativeExpression": parse_MultiplicativeExpression,
            "MultiplicativeOperator": parse_MultiplicativeOperator,
            "AdditiveExpression": parse_AdditiveExpression,
            "AdditiveOperator": parse_AdditiveOperator,
            "ShiftExpression": parse_ShiftExpression,
            "ShiftOperator": parse_ShiftOperator,
            "RelationalExpression": parse_RelationalExpression,
            "RelationalOperator": parse_RelationalOperator,
            "RelationalExpressionNoIn": parse_RelationalExpressionNoIn,
            "RelationalOperatorNoIn": parse_RelationalOperatorNoIn,
            "EqualityExpression": parse_EqualityExpression,
            "EqualityExpressionNoIn": parse_EqualityExpressionNoIn,
            "EqualityOperator": parse_EqualityOperator,
            "BitwiseANDExpression": parse_BitwiseANDExpression,
            "BitwiseANDExpressionNoIn": parse_BitwiseANDExpressionNoIn,
            "BitwiseANDOperator": parse_BitwiseANDOperator,
            "BitwiseXORExpression": parse_BitwiseXORExpression,
            "BitwiseXORExpressionNoIn": parse_BitwiseXORExpressionNoIn,
            "BitwiseXOROperator": parse_BitwiseXOROperator,
            "BitwiseORExpression": parse_BitwiseORExpression,
            "BitwiseORExpressionNoIn": parse_BitwiseORExpressionNoIn,
            "BitwiseOROperator": parse_BitwiseOROperator,
            "LogicalANDExpression": parse_LogicalANDExpression,
            "LogicalANDExpressionNoIn": parse_LogicalANDExpressionNoIn,
            "LogicalANDOperator": parse_LogicalANDOperator,
            "LogicalORExpression": parse_LogicalORExpression,
            "LogicalORExpressionNoIn": parse_LogicalORExpressionNoIn,
            "LogicalOROperator": parse_LogicalOROperator,
            "ConditionalExpression": parse_ConditionalExpression,
            "ConditionalExpressionNoIn": parse_ConditionalExpressionNoIn,
            "AssignmentExpression": parse_AssignmentExpression,
            "AssignmentExpressionNoIn": parse_AssignmentExpressionNoIn,
            "AssignmentOperator": parse_AssignmentOperator,
            "Expression": parse_Expression,
            "ExpressionNoIn": parse_ExpressionNoIn,
            "Statement": parse_Statement,
            "Block": parse_Block,
            "StatementList": parse_StatementList,
            "VariableStatement": parse_VariableStatement,
            "TypeSpecifier": parse_TypeSpecifier,
            "VariableDeclarationList": parse_VariableDeclarationList,
            "VariableDeclarationListNoIn": parse_VariableDeclarationListNoIn,
            "VariableDeclaration": parse_VariableDeclaration,
            "VariableDeclarationNoIn": parse_VariableDeclarationNoIn,
            "Initialiser": parse_Initialiser,
            "InitialiserNoIn": parse_InitialiserNoIn,
            "EmptyStatement": parse_EmptyStatement,
            "ExpressionStatement": parse_ExpressionStatement,
            "IfStatement": parse_IfStatement,
            "IterationStatement": parse_IterationStatement,
            "DoWhileStatement": parse_DoWhileStatement,
            "WhileStatement": parse_WhileStatement,
            "ForStatement": parse_ForStatement,
            "ContinueStatement": parse_ContinueStatement,
            "BreakStatement": parse_BreakStatement,
            "ReturnStatement": parse_ReturnStatement,
            "SwitchStatement": parse_SwitchStatement,
            "CaseBlock": parse_CaseBlock,
            "CaseClauses": parse_CaseClauses,
            "CaseClause": parse_CaseClause,
            "DefaultClause": parse_DefaultClause,
            "LabelledStatement": parse_LabelledStatement,
            "FunctionDeclaration": parse_FunctionDeclaration,
            "FunctionExpression": parse_FunctionExpression,
            "FormalParameterList": parse_FormalParameterList,
            "ArrayTypeSpecifier": parse_ArrayTypeSpecifier,
            "FunctionBody": parse_FunctionBody,
            "Program": parse_Program,
            "SourceElements": parse_SourceElements
          };
          
          if (startRule !== undefined) {
            if (parseFunctions[startRule] === undefined) {
              throw new Error("Invalid rule name: " + quote(startRule) + ".");
            }
          } else {
            startRule = "start";
          }
          
          var pos = { offset: 0, line: 1, column: 1, seenCR: false };
          var reportFailures = 0;
          var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
          var rightmostFailuresExpected = [];
          
          function padLeft(input, padding, length) {
            var result = input;
            
            var padLength = length - input.length;
            for (var i = 0; i < padLength; i++) {
              result = padding + result;
            }
            
            return result;
          }
          
          function escape(ch) {
            var charCode = ch.charCodeAt(0);
            var escapeChar;
            var length;
            
            if (charCode <= 0xFF) {
              escapeChar = 'x';
              length = 2;
            } else {
              escapeChar = 'u';
              length = 4;
            }
            
            return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
          }
          
          function clone(object) {
            var result = {};
            for (var key in object) {
              result[key] = object[key];
            }
            return result;
          }
          
          function advance(pos, n) {
            var endOffset = pos.offset + n;
            
            for (var offset = pos.offset; offset < endOffset; offset++) {
              var ch = input.charAt(offset);
              if (ch === "\n") {
                if (!pos.seenCR) { pos.line++; }
                pos.column = 1;
                pos.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                pos.line++;
                pos.column = 1;
                pos.seenCR = true;
              } else {
                pos.column++;
                pos.seenCR = false;
              }
            }
            
            pos.offset += n;
          }
          
          function matchFailed(failure) {
            if (pos.offset < rightmostFailuresPos.offset) {
              return;
            }
            
            if (pos.offset > rightmostFailuresPos.offset) {
              rightmostFailuresPos = clone(pos);
              rightmostFailuresExpected = [];
            }
            
            rightmostFailuresExpected.push(failure);
          }
          
          function parse_start() {
            var result0, result1, result2;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse___();
            if (result0 !== null) {
              result1 = parse_Program();
              if (result1 !== null) {
                result2 = parse___();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, program) { return program; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SourceCharacter() {
            var result0;
            
            if (input.length > pos.offset) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            return result0;
          }
          
          function parse_WhiteSpace() {
            var result0;
            
            reportFailures++;
            if (/^[\t\x0B\f \xA0\uFEFF]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\t\\x0B\\f \\xA0\\uFEFF]");
              }
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("whitespace");
            }
            return result0;
          }
          
          function parse_LineTerminator() {
            var result0;
            
            if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\n\\r\\u2028\\u2029]");
              }
            }
            return result0;
          }
          
          function parse_LineTerminatorSequence() {
            var result0;
            
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 10) {
              result0 = "\n";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "\r\n") {
                result0 = "\r\n";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\r\\n\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 13) {
                  result0 = "\r";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\r\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 8232) {
                    result0 = "\u2028";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\u2028\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos.offset) === 8233) {
                      result0 = "\u2029";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\u2029\"");
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("end of line");
            }
            return result0;
          }
          
          function parse_Comment() {
            var result0;
            
            reportFailures++;
            result0 = parse_MultiLineComment();
            if (result0 === null) {
              result0 = parse_SingleLineComment();
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("comment");
            }
            return result0;
          }
          
          function parse_MultiLineComment() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 2) === "/*") {
              result0 = "/*";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/*\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              pos1 = clone(pos);
              pos2 = clone(pos);
              reportFailures++;
              if (input.substr(pos.offset, 2) === "*/") {
                result2 = "*/";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*/\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              if (result2 !== null) {
                result3 = parse_SourceCharacter();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos1 = clone(pos);
                pos2 = clone(pos);
                reportFailures++;
                if (input.substr(pos.offset, 2) === "*/") {
                  result2 = "*/";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*/\"");
                  }
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                if (result2 !== null) {
                  result3 = parse_SourceCharacter();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              }
              if (result1 !== null) {
                if (input.substr(pos.offset, 2) === "*/") {
                  result2 = "*/";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*/\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_MultiLineCommentNoLineTerminator() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 2) === "/*") {
              result0 = "/*";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/*\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              pos1 = clone(pos);
              pos2 = clone(pos);
              reportFailures++;
              if (input.substr(pos.offset, 2) === "*/") {
                result2 = "*/";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*/\"");
                }
              }
              if (result2 === null) {
                result2 = parse_LineTerminator();
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              if (result2 !== null) {
                result3 = parse_SourceCharacter();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos1 = clone(pos);
                pos2 = clone(pos);
                reportFailures++;
                if (input.substr(pos.offset, 2) === "*/") {
                  result2 = "*/";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*/\"");
                  }
                }
                if (result2 === null) {
                  result2 = parse_LineTerminator();
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                if (result2 !== null) {
                  result3 = parse_SourceCharacter();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              }
              if (result1 !== null) {
                if (input.substr(pos.offset, 2) === "*/") {
                  result2 = "*/";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*/\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SingleLineComment() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 2) === "//") {
              result0 = "//";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"//\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              pos1 = clone(pos);
              pos2 = clone(pos);
              reportFailures++;
              result2 = parse_LineTerminator();
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              if (result2 !== null) {
                result3 = parse_SourceCharacter();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos1 = clone(pos);
                pos2 = clone(pos);
                reportFailures++;
                result2 = parse_LineTerminator();
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                if (result2 !== null) {
                  result3 = parse_SourceCharacter();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Identifier() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            reportFailures++;
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result0 = parse_ReservedWord();
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 !== null) {
              result1 = parse_IdentifierName();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, name) { 
                    return name; 
                })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("identifier");
            }
            return result0;
          }
          
          function parse_IdentifierName() {
            var result0, result1, result2;
            var pos0, pos1;
            
            reportFailures++;
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_IdentifierStart();
            if (result0 !== null) {
              result1 = [];
              result2 = parse_IdentifierPart();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_IdentifierPart();
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, start, parts) {
                  return start + parts.join("");
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("identifier");
            }
            return result0;
          }
          
          function parse_IdentifierStart() {
            var result0, result1;
            var pos0, pos1;
            
            if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z]");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 95) {
                result0 = "_";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 92) {
                  result0 = "\\";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_UnicodeEscapeSequence();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, sequence) { return sequence; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
            return result0;
          }
          
          function parse_IdentifierPart() {
            var result0;
            
            result0 = parse_IdentifierStart();
            if (result0 === null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result0 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
            return result0;
          }
          
          function parse_ReservedWord() {
            var result0;
            
            result0 = parse_Keyword();
            if (result0 === null) {
              result0 = parse_TypeSpecifier();
              if (result0 === null) {
                result0 = parse_FutureReservedWord();
                if (result0 === null) {
                  result0 = parse_NullLiteral();
                  if (result0 === null) {
                    result0 = parse_BooleanLiteral();
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_Keyword() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "break") {
              result0 = "break";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"break\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 4) === "case") {
                result0 = "case";
                advance(pos, 4);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"case\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 5) === "catch") {
                  result0 = "catch";
                  advance(pos, 5);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"catch\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 8) === "continue") {
                    result0 = "continue";
                    advance(pos, 8);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"continue\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 8) === "debugger") {
                      result0 = "debugger";
                      advance(pos, 8);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"debugger\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 7) === "default") {
                        result0 = "default";
                        advance(pos, 7);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"default\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 6) === "delete") {
                          result0 = "delete";
                          advance(pos, 6);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"delete\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 2) === "do") {
                            result0 = "do";
                            advance(pos, 2);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"do\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 4) === "else") {
                              result0 = "else";
                              advance(pos, 4);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"else\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 7) === "finally") {
                                result0 = "finally";
                                advance(pos, 7);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"finally\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 3) === "for") {
                                  result0 = "for";
                                  advance(pos, 3);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"for\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 8) === "function") {
                                    result0 = "function";
                                    advance(pos, 8);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"function\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 2) === "if") {
                                      result0 = "if";
                                      advance(pos, 2);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"if\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 10) === "instanceof") {
                                        result0 = "instanceof";
                                        advance(pos, 10);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"instanceof\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 2) === "in") {
                                          result0 = "in";
                                          advance(pos, 2);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"in\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos.offset, 3) === "new") {
                                            result0 = "new";
                                            advance(pos, 3);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"new\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos.offset, 6) === "return") {
                                              result0 = "return";
                                              advance(pos, 6);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"return\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos.offset, 6) === "switch") {
                                                result0 = "switch";
                                                advance(pos, 6);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"switch\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos.offset, 4) === "this") {
                                                  result0 = "this";
                                                  advance(pos, 4);
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"this\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos.offset, 5) === "throw") {
                                                    result0 = "throw";
                                                    advance(pos, 5);
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"throw\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos.offset, 3) === "try") {
                                                      result0 = "try";
                                                      advance(pos, 3);
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"try\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos.offset, 6) === "typeof") {
                                                        result0 = "typeof";
                                                        advance(pos, 6);
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"typeof\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.substr(pos.offset, 3) === "var") {
                                                          result0 = "var";
                                                          advance(pos, 3);
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"var\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (input.substr(pos.offset, 4) === "void") {
                                                            result0 = "void";
                                                            advance(pos, 4);
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"void\"");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (input.substr(pos.offset, 5) === "while") {
                                                              result0 = "while";
                                                              advance(pos, 5);
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"while\"");
                                                              }
                                                            }
                                                            if (result0 === null) {
                                                              if (input.substr(pos.offset, 4) === "with") {
                                                                result0 = "with";
                                                                advance(pos, 4);
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"with\"");
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FutureReservedWord() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "class") {
              result0 = "class";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"class\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 5) === "const") {
                result0 = "const";
                advance(pos, 5);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"const\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 4) === "enum") {
                  result0 = "enum";
                  advance(pos, 4);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"enum\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 6) === "export") {
                    result0 = "export";
                    advance(pos, 6);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"export\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 7) === "extends") {
                      result0 = "extends";
                      advance(pos, 7);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"extends\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 6) === "import") {
                        result0 = "import";
                        advance(pos, 6);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"import\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 5) === "super") {
                          result0 = "super";
                          advance(pos, 5);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"super\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Literal() {
            var result0;
            var pos0;
            
            result0 = parse_NullLiteral();
            if (result0 === null) {
              result0 = parse_BooleanLiteral();
              if (result0 === null) {
                pos0 = clone(pos);
                result0 = parse_NumericLiteral();
                if (result0 !== null) {
                  result0 = (function(offset, line, column, value) {
                        return AST.literal(value, "NumericLiteral", {line:line, column:column});
                      /*
                      return {
                        type:  "NumericLiteral",
                        value: value
                      };
                      */
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  result0 = parse_StringLiteral();
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, value) {
                            return AST.literal(value, "StringLiteral", {line:line, column:column});
                            /*
                        return {
                          type:  "StringLiteral",
                          value: value
                        };
                        */
                      })(pos0.offset, pos0.line, pos0.column, result0);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_NullLiteral() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            result0 = parse_NullToken();
            if (result0 !== null) {
              result0 = (function(offset, line, column) { 
                    return AST.literal(null, "NullLiteral", {line:line, column:column});
                //return { type: "NullLiteral" }; 
              })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BooleanLiteral() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            result0 = parse_TrueToken();
            if (result0 !== null) {
              result0 = (function(offset, line, column) { 
                    return AST.literal(true, "BooleanLiteral", {line:line, column:column});
                    //return { type: "BooleanLiteral", value: true  }; 
                })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_FalseToken();
              if (result0 !== null) {
                result0 = (function(offset, line, column) { 
                        return AST.literal(false, "BooleanLiteral", {line:line, column:column});
                        //return { type: "BooleanLiteral", value: false }; 
                    })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
            return result0;
          }
          
          function parse_NumericLiteral() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            reportFailures++;
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_HexIntegerLiteral();
            if (result0 === null) {
              result0 = parse_DecimalLiteral();
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierStart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, literal) {
                  return literal;
                })(pos0.offset, pos0.line, pos0.column, result0[0]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("number");
            }
            return result0;
          }
          
          function parse_DecimalLiteral() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_DecimalIntegerLiteral();
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 46) {
                result1 = ".";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_DecimalDigits();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse_ExponentPart();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, parts) {
                  return parseFloat(parts);
                })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 46) {
                result0 = ".";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_DecimalDigits();
                if (result1 !== null) {
                  result2 = parse_ExponentPart();
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, parts) { return parseFloat(parts); })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_DecimalIntegerLiteral();
                if (result0 !== null) {
                  result1 = parse_ExponentPart();
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, parts) { return parseFloat(parts); })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
            return result0;
          }
          
          function parse_DecimalIntegerLiteral() {
            var result0, result1;
            var pos0;
            
            if (input.charCodeAt(pos.offset) === 48) {
              result0 = "0";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_NonZeroDigit();
              if (result0 !== null) {
                result1 = parse_DecimalDigits();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            }
            return result0;
          }
          
          function parse_DecimalDigits() {
            var result0, result1;
            
            result1 = parse_DecimalDigit();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DecimalDigit();
              }
            } else {
              result0 = null;
            }
            return result0;
          }
          
          function parse_DecimalDigit() {
            var result0;
            
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            return result0;
          }
          
          function parse_NonZeroDigit() {
            var result0;
            
            if (/^[1-9]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[1-9]");
              }
            }
            return result0;
          }
          
          function parse_ExponentPart() {
            var result0, result1;
            var pos0;
            
            pos0 = clone(pos);
            result0 = parse_ExponentIndicator();
            if (result0 !== null) {
              result1 = parse_SignedInteger();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ExponentIndicator() {
            var result0;
            
            if (/^[eE]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[eE]");
              }
            }
            return result0;
          }
          
          function parse_SignedInteger() {
            var result0, result1;
            var pos0;
            
            pos0 = clone(pos);
            if (/^[\-+]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-+]");
              }
            }
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_DecimalDigits();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_HexIntegerLiteral() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 48) {
              result0 = "0";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            if (result0 !== null) {
              if (/^[xX]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[xX]");
                }
              }
              if (result1 !== null) {
                result3 = parse_HexDigit();
                if (result3 !== null) {
                  result2 = [];
                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_HexDigit();
                  }
                } else {
                  result2 = null;
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, digits) { return parseInt("0x" + digits); })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_HexDigit() {
            var result0;
            
            if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-fA-F]");
              }
            }
            return result0;
          }
          
          function parse_StringLiteral() {
            var result0, result1, result2;
            var pos0, pos1;
            
            reportFailures++;
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 34) {
              result0 = "\"";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_DoubleStringCharacters();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 34) {
                  result2 = "\"";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 === null) {
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 39) {
                result0 = "'";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_SingleStringCharacters();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  if (input.charCodeAt(pos.offset) === 39) {
                    result2 = "'";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"'\"");
                    }
                  }
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, parts) {
                  return parts[1];
                })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            reportFailures--;
            if (reportFailures === 0 && result0 === null) {
              matchFailed("string");
            }
            return result0;
          }
          
          function parse_DoubleStringCharacters() {
            var result0, result1;
            var pos0;
            
            pos0 = clone(pos);
            result1 = parse_DoubleStringCharacter();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DoubleStringCharacter();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SingleStringCharacters() {
            var result0, result1;
            var pos0;
            
            pos0 = clone(pos);
            result1 = parse_SingleStringCharacter();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_SingleStringCharacter();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_DoubleStringCharacter() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 34) {
              result0 = "\"";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 92) {
                result0 = "\\";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 === null) {
                result0 = parse_LineTerminator();
              }
            }
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 !== null) {
              result1 = parse_SourceCharacter();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, char_) { return char_;     })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 92) {
                result0 = "\\";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_EscapeSequence();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, sequence) { return sequence;  })(pos0.offset, pos0.line, pos0.column, result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_LineContinuation();
              }
            }
            return result0;
          }
          
          function parse_SingleStringCharacter() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 39) {
              result0 = "'";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 92) {
                result0 = "\\";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 === null) {
                result0 = parse_LineTerminator();
              }
            }
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 !== null) {
              result1 = parse_SourceCharacter();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, char_) { return char_;     })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 92) {
                result0 = "\\";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_EscapeSequence();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, sequence) { return sequence;  })(pos0.offset, pos0.line, pos0.column, result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_LineContinuation();
              }
            }
            return result0;
          }
          
          function parse_LineContinuation() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 92) {
              result0 = "\\";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_LineTerminatorSequence();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, sequence) { return sequence; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_EscapeSequence() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            result0 = parse_CharacterEscapeSequence();
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 48) {
                result0 = "0";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              if (result0 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                result1 = parse_DecimalDigit();
                reportFailures--;
                if (result1 === null) {
                  result1 = "";
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return "\0"; })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_HexEscapeSequence();
                if (result0 === null) {
                  result0 = parse_UnicodeEscapeSequence();
                }
              }
            }
            return result0;
          }
          
          function parse_CharacterEscapeSequence() {
            var result0;
            
            result0 = parse_SingleEscapeCharacter();
            if (result0 === null) {
              result0 = parse_NonEscapeCharacter();
            }
            return result0;
          }
          
          function parse_SingleEscapeCharacter() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            if (/^['"\\bfnrtv]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("['\"\\\\bfnrtv]");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, char_) {
                  return char_
                    .replace("b", "\b")
                    .replace("f", "\f")
                    .replace("n", "\n")
                    .replace("r", "\r")
                    .replace("t", "\t")
                    .replace("v", "\x0B") // IE does not recognize "\v".
                })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_NonEscapeCharacter() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result0 = parse_EscapeCharacter();
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 === null) {
              result0 = parse_LineTerminator();
            }
            if (result0 !== null) {
              result1 = parse_SourceCharacter();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, char_) { return char_; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_EscapeCharacter() {
            var result0;
            
            result0 = parse_SingleEscapeCharacter();
            if (result0 === null) {
              result0 = parse_DecimalDigit();
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 120) {
                  result0 = "x";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"x\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 117) {
                    result0 = "u";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"u\"");
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_HexEscapeSequence() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 120) {
              result0 = "x";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"x\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              result1 = parse_HexDigit();
              if (result1 !== null) {
                result2 = parse_HexDigit();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, digits) {
                  return String.fromCharCode(parseInt("0x" + digits));
                })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_UnicodeEscapeSequence() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 117) {
              result0 = "u";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"u\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              result1 = parse_HexDigit();
              if (result1 !== null) {
                result2 = parse_HexDigit();
                if (result2 !== null) {
                  result3 = parse_HexDigit();
                  if (result3 !== null) {
                    result4 = parse_HexDigit();
                    if (result4 !== null) {
                      result1 = [result1, result2, result3, result4];
                    } else {
                      result1 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result1 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, digits) {
                  return String.fromCharCode(parseInt("0x" + digits));
                })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BreakToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "break") {
              result0 = "break";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"break\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_CaseToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 4) === "case") {
              result0 = "case";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"case\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_CatchToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "catch") {
              result0 = "catch";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"catch\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ContinueToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 8) === "continue") {
              result0 = "continue";
              advance(pos, 8);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"continue\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_DebuggerToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 8) === "debugger") {
              result0 = "debugger";
              advance(pos, 8);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"debugger\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_DefaultToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 7) === "default") {
              result0 = "default";
              advance(pos, 7);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"default\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_DeleteToken() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 6) === "delete") {
              result0 = "delete";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"delete\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "delete"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_DoToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 2) === "do") {
              result0 = "do";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"do\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ElseToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 4) === "else") {
              result0 = "else";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FalseToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "false") {
              result0 = "false";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"false\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FinallyToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 7) === "finally") {
              result0 = "finally";
              advance(pos, 7);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"finally\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ForToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 3) === "for") {
              result0 = "for";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"for\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FunctionToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 8) === "function") {
              result0 = "function";
              advance(pos, 8);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"function\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_GetToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 3) === "get") {
              result0 = "get";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"get\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_IfToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 2) === "if") {
              result0 = "if";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"if\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_InstanceofToken() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 10) === "instanceof") {
              result0 = "instanceof";
              advance(pos, 10);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"instanceof\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "instanceof"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_InToken() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "in") {
              result0 = "in";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"in\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "in"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_NewToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 3) === "new") {
              result0 = "new";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"new\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_NullToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 4) === "null") {
              result0 = "null";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"null\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ReturnToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 6) === "return") {
              result0 = "return";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"return\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SetToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 3) === "set") {
              result0 = "set";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"set\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SwitchToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 6) === "switch") {
              result0 = "switch";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"switch\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ThisToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 4) === "this") {
              result0 = "this";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"this\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ThrowToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "throw") {
              result0 = "throw";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"throw\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_TrueToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 4) === "true") {
              result0 = "true";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"true\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_TryToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 3) === "try") {
              result0 = "try";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"try\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_TypeofToken() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 6) === "typeof") {
              result0 = "typeof";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"typeof\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "typeof"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_VarToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 3) === "var") {
              result0 = "var";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"var\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_VoidToken() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 4) === "void") {
              result0 = "void";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"void\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "void"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_WhileToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 5) === "while") {
              result0 = "while";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"while\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_WithToken() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            if (input.substr(pos.offset, 4) === "with") {
              result0 = "with";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"with\"");
              }
            }
            if (result0 !== null) {
              pos1 = clone(pos);
              reportFailures++;
              result1 = parse_IdentifierPart();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_EOS() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            result0 = parse___();
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 59) {
                result1 = ";";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse__();
              if (result0 !== null) {
                result1 = parse_LineTerminatorSequence();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                result0 = parse__();
                if (result0 !== null) {
                  pos1 = clone(pos);
                  reportFailures++;
                  if (input.charCodeAt(pos.offset) === 125) {
                    result1 = "}";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  reportFailures--;
                  if (result1 !== null) {
                    result1 = "";
                    pos = clone(pos1);
                  } else {
                    result1 = null;
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  result0 = parse___();
                  if (result0 !== null) {
                    result1 = parse_EOF();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_EOSNoLineTerminator() {
            var result0, result1;
            var pos0, pos1;
            
            pos0 = clone(pos);
            result0 = parse__();
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 59) {
                result1 = ";";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse__();
              if (result0 !== null) {
                result1 = parse_LineTerminatorSequence();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                result0 = parse__();
                if (result0 !== null) {
                  pos1 = clone(pos);
                  reportFailures++;
                  if (input.charCodeAt(pos.offset) === 125) {
                    result1 = "}";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  reportFailures--;
                  if (result1 !== null) {
                    result1 = "";
                    pos = clone(pos1);
                  } else {
                    result1 = null;
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  result0 = parse__();
                  if (result0 !== null) {
                    result1 = parse_EOF();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_EOF() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            reportFailures++;
            if (input.length > pos.offset) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse__() {
            var result0, result1;
            
            result0 = [];
            result1 = parse_WhiteSpace();
            if (result1 === null) {
              result1 = parse_MultiLineCommentNoLineTerminator();
              if (result1 === null) {
                result1 = parse_SingleLineComment();
              }
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_WhiteSpace();
              if (result1 === null) {
                result1 = parse_MultiLineCommentNoLineTerminator();
                if (result1 === null) {
                  result1 = parse_SingleLineComment();
                }
              }
            }
            return result0;
          }
          
          function parse___() {
            var result0, result1;
            
            result0 = [];
            result1 = parse_WhiteSpace();
            if (result1 === null) {
              result1 = parse_LineTerminatorSequence();
              if (result1 === null) {
                result1 = parse_Comment();
              }
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_WhiteSpace();
              if (result1 === null) {
                result1 = parse_LineTerminatorSequence();
                if (result1 === null) {
                  result1 = parse_Comment();
                }
              }
            }
            return result0;
          }
          
          function parse_PrimaryExpression() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            
            pos0 = clone(pos);
            result0 = parse_Identifier();
            if (result0 !== null) {
              result0 = (function(offset, line, column, name) { 
                    return AST.identifier(name, {line:line, column:column});
                    //return { type: "Variable", name: name }; 
                })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_Literal();
              if (result0 === null) {
                result0 = parse_ArrayLiteral();
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.charCodeAt(pos.offset) === 40) {
                    result0 = "(";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse___();
                    if (result1 !== null) {
                      result2 = parse_Expression();
                      if (result2 !== null) {
                        result3 = parse___();
                        if (result3 !== null) {
                          if (input.charCodeAt(pos.offset) === 41) {
                            result4 = ")";
                            advance(pos, 1);
                          } else {
                            result4 = null;
                            if (reportFailures === 0) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result4 !== null) {
                            result0 = [result0, result1, result2, result3, result4];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, expression) { return expression; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_ArrayLiteral() {
            var result0, result1, result2, result3, result4, result5, result6, result7;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 91) {
              result0 = "[";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                pos2 = clone(pos);
                result2 = parse_Elision();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 93) {
                    result3 = "]";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, elision) {
                    return AST.literal(elision !== null ? elision[0] : [], "ArrayLiteral", {line:line, column:column});
                  /*
                  return {
                    type:     "ArrayLiteral",
                    elements: elision !== null ? elision[0] : []
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 91) {
                result0 = "[";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  result2 = parse_ElementList();
                  if (result2 !== null) {
                    result3 = parse___();
                    if (result3 !== null) {
                      pos2 = clone(pos);
                      if (input.charCodeAt(pos.offset) === 44) {
                        result4 = ",";
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }
                      if (result4 !== null) {
                        result5 = parse___();
                        if (result5 !== null) {
                          pos3 = clone(pos);
                          result6 = parse_Elision();
                          if (result6 !== null) {
                            result7 = parse___();
                            if (result7 !== null) {
                              result6 = [result6, result7];
                            } else {
                              result6 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result6 = null;
                            pos = clone(pos3);
                          }
                          result6 = result6 !== null ? result6 : "";
                          if (result6 !== null) {
                            result4 = [result4, result5, result6];
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result4 = null;
                        pos = clone(pos2);
                      }
                      result4 = result4 !== null ? result4 : "";
                      if (result4 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result5 = "]";
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result5 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, elements, elision) {
                        var elts = elements.concat((elision !== null && elision.length && elision[2] !== null) ? elision[2][0] : []);
                        return AST.literal(elts, "ArrayLiteral", {line:line, column:column});
                        /*
                    return {
                      type:     "ArrayLiteral",
                      elements: elements.concat((elision !== null && elision.length && elision[2] !== null) ? elision[2][0] : [])
                    };
                    */
                  })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
            return result0;
          }
          
          function parse_ElementList() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1, pos2, pos3, pos4;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            pos3 = clone(pos);
            pos4 = clone(pos);
            result0 = parse_Elision();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos4);
              }
            } else {
              result0 = null;
              pos = clone(pos4);
            }
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_AssignmentExpression();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos3);
              }
            } else {
              result0 = null;
              pos = clone(pos3);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, elision, element) {
                    return (elision !== null && elision.length ? elision[0] : []).concat(element);
                  })(pos2.offset, pos2.line, pos2.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos2);
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              pos3 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    pos4 = clone(pos);
                    result5 = parse_Elision();
                    if (result5 !== null) {
                      result6 = parse___();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = clone(pos4);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos4);
                    }
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result6 = parse_AssignmentExpression();
                      if (result6 !== null) {
                        result2 = [result2, result3, result4, result5, result6];
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
              if (result2 !== null) {
                result2 = (function(offset, line, column, elision, element) {
                        return (elision !== null && elision.length ? elision[0] : []).concat(element);
                    })(pos2.offset, pos2.line, pos2.column, result2[3], result2[4]);
              }
              if (result2 === null) {
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      pos4 = clone(pos);
                      result5 = parse_Elision();
                      if (result5 !== null) {
                        result6 = parse___();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = clone(pos4);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos4);
                      }
                      result5 = result5 !== null ? result5 : "";
                      if (result5 !== null) {
                        result6 = parse_AssignmentExpression();
                        if (result6 !== null) {
                          result2 = [result2, result3, result4, result5, result6];
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, elision, element) {
                        return (elision !== null && elision.length ? elision[0] : []).concat(element);
                      })(pos2.offset, pos2.line, pos2.column, result2[3], result2[4]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                    result = result.concat(tail[i]);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Elision() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 44) {
              result0 = ",";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, elision) {
                    var result = [null];
                  for (var i = 0; i < elision.length; i++) {
                    result.push(null);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_MemberExpression() {
            var result0, result1, result2, result3, result4, result5, result6, result7;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_PrimaryExpression();
            if (result0 === null) {
              result0 = parse_FunctionExpression();
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              pos3 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 91) {
                  result3 = "[";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"[\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_Expression();
                    if (result5 !== null) {
                      result6 = parse___();
                      if (result6 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result7 = "]";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result7 !== null) {
                          result2 = [result2, result3, result4, result5, result6, result7];
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
              if (result2 !== null) {
                result2 = (function(offset, line, column, name) { return name; })(pos2.offset, pos2.line, pos2.column, result2[3]);
              }
              if (result2 === null) {
                pos = clone(pos2);
              }
              if (result2 === null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 46) {
                    result3 = ".";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_IdentifierName();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, name) { return name; })(pos2.offset, pos2.line, pos2.column, result2[3]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 91) {
                    result3 = "[";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"[\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_Expression();
                      if (result5 !== null) {
                        result6 = parse___();
                        if (result6 !== null) {
                          if (input.charCodeAt(pos.offset) === 93) {
                            result7 = "]";
                            advance(pos, 1);
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result7 !== null) {
                            result2 = [result2, result3, result4, result5, result6, result7];
                          } else {
                            result2 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, name) { return name; })(pos2.offset, pos2.line, pos2.column, result2[3]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  result2 = parse___();
                  if (result2 !== null) {
                    if (input.charCodeAt(pos.offset) === 46) {
                      result3 = ".";
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result3 !== null) {
                      result4 = parse___();
                      if (result4 !== null) {
                        result5 = parse_IdentifierName();
                        if (result5 !== null) {
                          result2 = [result2, result3, result4, result5];
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                  if (result2 !== null) {
                    result2 = (function(offset, line, column, name) { return name; })(pos2.offset, pos2.line, pos2.column, result2[3]);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, base, accessors) {
                  var result = base;
                  for (var i = 0; i < accessors.length; i++) {
                    result = AST.memberExpression(result, accessors[i], {line:line, column:column});
                    /*
                    result = {
                      type: "PropertyAccess",
                      base: result,
                      name: accessors[i]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_CallExpression() {
            var result0, result1, result2, result3, result4, result5, result6, result7;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result0 = parse_MemberExpression();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_Arguments();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos3);
                }
              } else {
                result0 = null;
                pos = clone(pos3);
              }
            } else {
              result0 = null;
              pos = clone(pos3);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, name, args) {
                    return AST.callExpression(name, args, {line:line, column:column});
                    /*
                    return {
                      type:      "FunctionCall",
                      name:      name,
                      arguments: args
                    };
                    */
                  })(pos2.offset, pos2.line, pos2.column, result0[0], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos2);
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              pos3 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_Arguments();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
              if (result2 !== null) {
                result2 = (function(offset, line, column, args) {
                        return {
                          type:      "FunctionCallArguments",
                          arguments: args
                        };
                      })(pos2.offset, pos2.line, pos2.column, result2[1]);
              }
              if (result2 === null) {
                pos = clone(pos2);
              }
              if (result2 === null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 91) {
                    result3 = "[";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"[\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_Expression();
                      if (result5 !== null) {
                        result6 = parse___();
                        if (result6 !== null) {
                          if (input.charCodeAt(pos.offset) === 93) {
                            result7 = "]";
                            advance(pos, 1);
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result7 !== null) {
                            result2 = [result2, result3, result4, result5, result6, result7];
                          } else {
                            result2 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, name) {
                          return {
                            type: "PropertyAccessProperty",
                            name: name
                          };
                        })(pos2.offset, pos2.line, pos2.column, result2[3]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  result2 = parse___();
                  if (result2 !== null) {
                    if (input.charCodeAt(pos.offset) === 46) {
                      result3 = ".";
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result3 !== null) {
                      result4 = parse___();
                      if (result4 !== null) {
                        result5 = parse_IdentifierName();
                        if (result5 !== null) {
                          result2 = [result2, result3, result4, result5];
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                  if (result2 !== null) {
                    result2 = (function(offset, line, column, name) {
                            return {
                              type: "PropertyAccessProperty",
                              name: name
                            };
                          })(pos2.offset, pos2.line, pos2.column, result2[3]);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                }
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_Arguments();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, args) {
                          return {
                            type:      "FunctionCallArguments",
                            arguments: args
                          };
                        })(pos2.offset, pos2.line, pos2.column, result2[1]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  result2 = parse___();
                  if (result2 !== null) {
                    if (input.charCodeAt(pos.offset) === 91) {
                      result3 = "[";
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"[\"");
                      }
                    }
                    if (result3 !== null) {
                      result4 = parse___();
                      if (result4 !== null) {
                        result5 = parse_Expression();
                        if (result5 !== null) {
                          result6 = parse___();
                          if (result6 !== null) {
                            if (input.charCodeAt(pos.offset) === 93) {
                              result7 = "]";
                              advance(pos, 1);
                            } else {
                              result7 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"]\"");
                              }
                            }
                            if (result7 !== null) {
                              result2 = [result2, result3, result4, result5, result6, result7];
                            } else {
                              result2 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result2 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                  if (result2 !== null) {
                    result2 = (function(offset, line, column, name) {
                            return {
                              type: "PropertyAccessProperty",
                              name: name
                            };
                          })(pos2.offset, pos2.line, pos2.column, result2[3]);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                  if (result2 === null) {
                    pos2 = clone(pos);
                    pos3 = clone(pos);
                    result2 = parse___();
                    if (result2 !== null) {
                      if (input.charCodeAt(pos.offset) === 46) {
                        result3 = ".";
                        advance(pos, 1);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("\".\"");
                        }
                      }
                      if (result3 !== null) {
                        result4 = parse___();
                        if (result4 !== null) {
                          result5 = parse_IdentifierName();
                          if (result5 !== null) {
                            result2 = [result2, result3, result4, result5];
                          } else {
                            result2 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                    if (result2 !== null) {
                      result2 = (function(offset, line, column, name) {
                              return {
                                type: "PropertyAccessProperty",
                                name: name
                              };
                            })(pos2.offset, pos2.line, pos2.column, result2[3]);
                    }
                    if (result2 === null) {
                      pos = clone(pos2);
                    }
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, base, argumentsOrAccessors) {
                  var result = base;
                  for (var i = 0; i < argumentsOrAccessors.length; i++) {
                    switch (argumentsOrAccessors[i].type) {
                      case "FunctionCallArguments":
                        result = AST.callExpression(result, argumentsOrAccessors[i].arguments, {line:line, column:column});
                        /*
                        result = {
                          type:      "FunctionCall",
                          name:      result,
                          arguments: argumentsOrAccessors[i].arguments
                        };
                        */
                        break;
                      case "PropertyAccessProperty":
                        result = AST.memberExpression(result, argumentsOrAccessors[i].name, {line:line, column:column});
                        /*
                        result = {
                          type: "PropertyAccess",
                          base: result,
                          name: argumentsOrAccessors[i].name
                        };
                        */
                        break;
                      default:
                        throw new Error(
                          "Invalid expression type: " + argumentsOrAccessors[i].type
                        );
                    }
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Arguments() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 40) {
              result0 = "(";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_ArgumentList();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 41) {
                      result4 = ")";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, args) {
                return args !== null ? args : [];
              })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ArgumentList() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_AssignmentExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_AssignmentExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_AssignmentExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LeftHandSideExpression() {
            var result0;
            
            result0 = parse_CallExpression();
            if (result0 === null) {
              result0 = parse_MemberExpression();
            }
            return result0;
          }
          
          function parse_PostfixExpression() {
            var result0, result1, result2;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LeftHandSideExpression();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_PostfixOperator();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expression, operator) {
                    return AST.updateExpression(operator, expression, false, {line:line, column:column});
                    /*
                  return {
                    type:       "PostfixExpression",
                    operator:   operator,
                    expression: expression
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_LeftHandSideExpression();
            }
            return result0;
          }
          
          function parse_PostfixOperator() {
            var result0;
            
            if (input.substr(pos.offset, 2) === "++") {
              result0 = "++";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"++\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "--") {
                result0 = "--";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"--\"");
                }
              }
            }
            return result0;
          }
          
          function parse_UnaryExpression() {
            var result0, result1, result2;
            var pos0, pos1;
            
            result0 = parse_PostfixExpression();
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_UnaryOperator();
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  result2 = parse_UnaryExpression();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, operator, expression) {
                        if (operator === "++" || operator === "--") {
                            return AST.updateExpression(operator, expression, true, {line:line, column:column});
                        }
                        else {
                            return AST.unaryExpression(operator, expression, true, {line:line, column:column});
                        }
                        /*
                    return {
                      type:       "UnaryExpression",
                      operator:   operator,
                      expression: expression
                    };
                    */
                  })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
            return result0;
          }
          
          function parse_UnaryOperator() {
            var result0;
            
            if (input.substr(pos.offset, 2) === "++") {
              result0 = "++";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"++\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "--") {
                result0 = "--";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"--\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 43) {
                  result0 = "+";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 45) {
                    result0 = "-";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos.offset) === 126) {
                      result0 = "~";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"~\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos.offset) === 33) {
                        result0 = "!";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"!\"");
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_MultiplicativeExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_UnaryExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_MultiplicativeOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_UnaryExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_MultiplicativeOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_UnaryExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_MultiplicativeOperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 42) {
              result0 = "*";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 47) {
                result0 = "/";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 37) {
                  result0 = "%";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"%\"");
                  }
                }
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, operator) { return operator; })(pos0.offset, pos0.line, pos0.column, result0[0]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_AdditiveExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_MultiplicativeExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_AdditiveOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_MultiplicativeExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_AdditiveOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_MultiplicativeExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_AdditiveOperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 43) {
              result0 = "+";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 43) {
                result1 = "+";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result1 = "=";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "+"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 45) {
                result0 = "-";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result0 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 45) {
                  result1 = "-";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos.offset) === 61) {
                    result1 = "=";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                }
                reportFailures--;
                if (result1 === null) {
                  result1 = "";
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return "-"; })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
            return result0;
          }
          
          function parse_ShiftExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_AdditiveExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_ShiftOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_AdditiveExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_ShiftOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_AdditiveExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ShiftOperator() {
            var result0;
            
            if (input.substr(pos.offset, 2) === "<<") {
              result0 = "<<";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"<<\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 3) === ">>>") {
                result0 = ">>>";
                advance(pos, 3);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\">>>\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === ">>") {
                  result0 = ">>";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">>\"");
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_RelationalExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ShiftExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_RelationalOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_ShiftExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_RelationalOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_ShiftExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_RelationalOperator() {
            var result0;
            
            if (input.substr(pos.offset, 2) === "<=") {
              result0 = "<=";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"<=\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === ">=") {
                result0 = ">=";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\">=\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 60) {
                  result0 = "<";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 62) {
                    result0 = ">";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_RelationalExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ShiftExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_RelationalOperatorNoIn();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_ShiftExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_RelationalOperatorNoIn();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_ShiftExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_RelationalOperatorNoIn() {
            var result0;
            
            if (input.substr(pos.offset, 2) === "<=") {
              result0 = "<=";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"<=\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === ">=") {
                result0 = ">=";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\">=\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 60) {
                  result0 = "<";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 62) {
                    result0 = ">";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_EqualityExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_RelationalExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_EqualityOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_RelationalExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_EqualityOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_RelationalExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_EqualityExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_RelationalExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_EqualityOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_RelationalExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_EqualityOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_RelationalExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_EqualityOperator() {
            var result0;
            
            if (input.substr(pos.offset, 3) === "===") {
              result0 = "===";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"===\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 3) === "!==") {
                result0 = "!==";
                advance(pos, 3);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!==\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === "==") {
                  result0 = "==";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"==\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 2) === "!=") {
                    result0 = "!=";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"!=\"");
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_BitwiseANDExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_EqualityExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_BitwiseANDOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_EqualityExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_BitwiseANDOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_EqualityExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseANDExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_EqualityExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_BitwiseANDOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_EqualityExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_BitwiseANDOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_EqualityExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseANDOperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 38) {
              result0 = "&";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"&\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 38) {
                result1 = "&";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result1 = "=";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "&"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseXORExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BitwiseANDExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_BitwiseXOROperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_BitwiseANDExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_BitwiseXOROperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_BitwiseANDExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseXORExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BitwiseANDExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_BitwiseXOROperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_BitwiseANDExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_BitwiseXOROperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_BitwiseANDExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseXOROperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 94) {
              result0 = "^";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"^\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 94) {
                result1 = "^";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"^\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result1 = "=";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "^"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseORExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BitwiseXORExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_BitwiseOROperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_BitwiseXORExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_BitwiseOROperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_BitwiseXORExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseORExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BitwiseXORExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_BitwiseOROperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_BitwiseXORExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_BitwiseOROperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_BitwiseXORExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BitwiseOROperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 124) {
              result0 = "|";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 124) {
                result1 = "|";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"|\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result1 = "=";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "|"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LogicalANDExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BitwiseORExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_LogicalANDOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_BitwiseORExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_LogicalANDOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_BitwiseORExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LogicalANDExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BitwiseORExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_LogicalANDOperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_BitwiseORExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_LogicalANDOperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_BitwiseORExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LogicalANDOperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "&&") {
              result0 = "&&";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"&&\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "&&"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LogicalORExpression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LogicalANDExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_LogicalOROperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_LogicalANDExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_LogicalOROperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_LogicalANDExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LogicalORExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LogicalANDExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_LogicalOROperator();
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_LogicalANDExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_LogicalOROperator();
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_LogicalANDExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LogicalOROperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "||") {
              result0 = "||";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"||\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "||"; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ConditionalExpression() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LogicalORExpression();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 63) {
                  result2 = "?";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"?\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_AssignmentExpression();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 58) {
                          result6 = ":";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_AssignmentExpression();
                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, condition, trueExpression, falseExpression) {
                    return AST.conditionalExpression(condition, trueExpression, falseExpression, {line:line, column:column});
                    /*
                  return {
                    type:            "ConditionalExpression",
                    condition:       condition,
                    trueExpression:  trueExpression,
                    falseExpression: falseExpression
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4], result0[8]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_LogicalORExpression();
            }
            return result0;
          }
          
          function parse_ConditionalExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LogicalORExpressionNoIn();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 63) {
                  result2 = "?";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"?\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_AssignmentExpressionNoIn();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 58) {
                          result6 = ":";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_AssignmentExpressionNoIn();
                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, condition, trueExpression, falseExpression) {
                    return AST.conditionalExpression(condition, trueExpression, falseExpression, {line:line, column:column});
                    /*
                  return {
                    type:            "ConditionalExpression",
                    condition:       condition,
                    trueExpression:  trueExpression,
                    falseExpression: falseExpression
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4], result0[8]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_LogicalORExpressionNoIn();
            }
            return result0;
          }
          
          function parse_AssignmentExpression() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LeftHandSideExpression();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_AssignmentOperator();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_AssignmentExpression();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, left, operator, right) {
                    return AST.assignmentExpression(operator, left, right, {line:line, column:column});
                    /*
                  return {
                    type:     "AssignmentExpression",
                    operator: operator,
                    left:     left,
                    right:    right
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_ConditionalExpression();
            }
            return result0;
          }
          
          function parse_AssignmentExpressionNoIn() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_LeftHandSideExpression();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_AssignmentOperator();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_AssignmentExpressionNoIn();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, left, operator, right) {
                    return AST.assignmentExpression(operator, left, right, {line:line, column:column});
                    /*
                  return {
                    type:     "AssignmentExpression",
                    operator: operator,
                    left:     left,
                    right:    right
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_ConditionalExpressionNoIn();
            }
            return result0;
          }
          
          function parse_AssignmentOperator() {
            var result0, result1;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 61) {
              result0 = "=";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return "="; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 2) === "*=") {
                result0 = "*=";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*=\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === "/=") {
                  result0 = "/=";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/=\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 2) === "%=") {
                    result0 = "%=";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"%=\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "+=") {
                      result0 = "+=";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"+=\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 2) === "-=") {
                        result0 = "-=";
                        advance(pos, 2);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"-=\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 3) === "<<=") {
                          result0 = "<<=";
                          advance(pos, 3);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"<<=\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 3) === ">>=") {
                            result0 = ">>=";
                            advance(pos, 3);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\">>=\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 4) === ">>>=") {
                              result0 = ">>>=";
                              advance(pos, 4);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\">>>=\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 2) === "&=") {
                                result0 = "&=";
                                advance(pos, 2);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"&=\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 2) === "^=") {
                                  result0 = "^=";
                                  advance(pos, 2);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"^=\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 2) === "|=") {
                                    result0 = "|=";
                                    advance(pos, 2);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"|=\"");
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_Expression() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_AssignmentExpression();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_AssignmentExpression();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_AssignmentExpression();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ExpressionNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_AssignmentExpressionNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_AssignmentExpressionNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_AssignmentExpressionNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = head;
                  for (var i = 0; i < tail.length; i++) {
                        result = AST.binaryExpression(tail[i][1], result, tail[i][3], {line:line, column:column});
                        /*
                    result = {
                      type:     "BinaryExpression",
                      operator: tail[i][1],
                      left:     result,
                      right:    tail[i][3]
                    };
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Statement() {
            var result0;
            
            result0 = parse_Block();
            if (result0 === null) {
              result0 = parse_VariableStatement();
              if (result0 === null) {
                result0 = parse_EmptyStatement();
                if (result0 === null) {
                  result0 = parse_ExpressionStatement();
                  if (result0 === null) {
                    result0 = parse_IfStatement();
                    if (result0 === null) {
                      result0 = parse_IterationStatement();
                      if (result0 === null) {
                        result0 = parse_ContinueStatement();
                        if (result0 === null) {
                          result0 = parse_BreakStatement();
                          if (result0 === null) {
                            result0 = parse_ReturnStatement();
                            if (result0 === null) {
                              result0 = parse_LabelledStatement();
                              if (result0 === null) {
                                result0 = parse_SwitchStatement();
                                if (result0 === null) {
                                  result0 = parse_FunctionDeclaration();
                                  if (result0 === null) {
                                    result0 = parse_FunctionExpression();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_Block() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 123) {
              result0 = "{";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                pos2 = clone(pos);
                result2 = parse_StatementList();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 125) {
                    result3 = "}";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, statements) {
                  return {
                    type:       "Block",
                    statements: statements !== null ? statements[0] : []
                  };
                })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_StatementList() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_Statement();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_Statement();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_Statement();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = [head];
                  for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i][1]);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_VariableStatement() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_VarToken();
            if (result0 === null) {
              result0 = parse_TypeSpecifier();
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_ArrayTypeSpecifier();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_VariableDeclarationList();
                    if (result4 !== null) {
                      result5 = parse_EOS();
                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, type, arrType, declarations) {
                    return AST.variableDeclaration(type, arrType ? true:false, declarations, {line:line, column:column});
                    /*
                  return {
                    type:         "VariableStatement",
                    varType: type,
                    isArray: arrType ? true : false,
                    declarations: declarations
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_TypeSpecifier() {
            var result0;
            
            if (input.substr(pos.offset, 3) === "int") {
              result0 = "int";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"int\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 4) === "char") {
                result0 = "char";
                advance(pos, 4);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"char\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 4) === "void") {
                  result0 = "void";
                  advance(pos, 4);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"void\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 6) === "string") {
                    result0 = "string";
                    advance(pos, 6);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"string\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 6) === "double") {
                      result0 = "double";
                      advance(pos, 6);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"double\"");
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          
          function parse_VariableDeclarationList() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_VariableDeclaration();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_VariableDeclaration();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_VariableDeclaration();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = [head];
                  for (var i = 0; i < tail.length; i++) { 
                    result.push(tail[i][3]);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_VariableDeclarationListNoIn() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_VariableDeclarationNoIn();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 44) {
                  result3 = ",";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result5 = parse_VariableDeclarationNoIn();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 44) {
                    result3 = ",";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      result5 = parse_VariableDeclarationNoIn();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = [head];
                  for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i][3]);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_VariableDeclaration() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_Identifier();
            if (result0 !== null) {
              pos2 = clone(pos);
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_Initialiser();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, name, value) {
                    return AST.variableDeclarator(name, value !== null ? value[1]:null, {line:line, column:column});
                    /*
                  return {
                    type:  "VariableDeclaration",
                    name:  name,
                    value: value !== null ? value[1] : null
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_VariableDeclarationNoIn() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_Identifier();
            if (result0 !== null) {
              pos2 = clone(pos);
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_InitialiserNoIn();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, name, value) {
                    return AST.variableDeclarator(name, value !== null ? value[1]:null, {line:line, column:column});
                    /*
                  return {
                    type:  "VariableDeclaration",
                    name:  name,
                    value: value !== null ? value[1] : null
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Initialiser() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 61) {
              result0 = "=";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_AssignmentExpression();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expression) { return expression; })(pos0.offset, pos0.line, pos0.column, result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_InitialiserNoIn() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 61) {
              result0 = "=";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result0 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = clone(pos2);
              }
              if (result1 !== null) {
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_AssignmentExpressionNoIn();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expression) { return expression; })(pos0.offset, pos0.line, pos0.column, result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_EmptyStatement() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            if (input.charCodeAt(pos.offset) === 59) {
              result0 = ";";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { 
                return AST.emptyStatement({line:line, column:column});
                //return { type: "EmptyStatement" }; 
              })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ExpressionStatement() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 123) {
              result0 = "{";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result0 === null) {
              result0 = parse_FunctionToken();
            }
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 !== null) {
              result1 = parse_Expression();
              if (result1 !== null) {
                result2 = parse_EOS();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expression) { return expression; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_IfStatement() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_IfToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 40) {
                  result2 = "(";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_Expression();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result6 = ")";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_Statement();
                            if (result8 !== null) {
                              pos2 = clone(pos);
                              result9 = parse___();
                              if (result9 !== null) {
                                result10 = parse_ElseToken();
                                if (result10 !== null) {
                                  result11 = parse___();
                                  if (result11 !== null) {
                                    result12 = parse_Statement();
                                    if (result12 !== null) {
                                      result9 = [result9, result10, result11, result12];
                                    } else {
                                      result9 = null;
                                      pos = clone(pos2);
                                    }
                                  } else {
                                    result9 = null;
                                    pos = clone(pos2);
                                  }
                                } else {
                                  result9 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result9 = null;
                                pos = clone(pos2);
                              }
                              result9 = result9 !== null ? result9 : "";
                              if (result9 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, condition, ifStatement, elseStatement) {
                    return AST.ifStatement(condition, ifStatement, elseStatement !== null ? elseStatement[3]:null, {line:line, column:column});
                    /*
                  return {
                    type:          "IfStatement",
                    condition:     condition,
                    ifStatement:   ifStatement,
                    elseStatement: elseStatement !== null ? elseStatement[3] : null
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[4], result0[8], result0[9]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_IterationStatement() {
            var result0;
            
            result0 = parse_DoWhileStatement();
            if (result0 === null) {
              result0 = parse_WhileStatement();
              if (result0 === null) {
                result0 = parse_ForStatement();
              }
            }
            return result0;
          }
          
          function parse_DoWhileStatement() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_DoToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_Statement();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_WhileToken();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 40) {
                          result6 = "(";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"(\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_Expression();
                            if (result8 !== null) {
                              result9 = parse___();
                              if (result9 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                  result10 = ")";
                                  advance(pos, 1);
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result10 !== null) {
                                  result11 = parse_EOS();
                                  if (result11 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, statement, condition) {
                    return AST.doWhileStatement(statement, condition, {line:line, column:column});
                    /*
                  return {
                    type: "DoWhileStatement",
                    condition: condition,
                    statement: statement
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[2], result0[8]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_WhileStatement() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_WhileToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 40) {
                  result2 = "(";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_Expression();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result6 = ")";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_Statement();
                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, condition, statement) {
                    return AST.whileStatement(condition, statement, {line:line, column:column});
                    /*
                  return {
                    type: "WhileStatement",
                    condition: condition,
                    statement: statement
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[4], result0[8]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ForStatement() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ForToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 40) {
                  result2 = "(";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    pos2 = clone(pos);
                    pos3 = clone(pos);
                    result4 = parse_VarToken();
                    if (result4 === null) {
                      result4 = parse_TypeSpecifier();
                    }
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        result6 = parse_VariableDeclarationListNoIn();
                        if (result6 !== null) {
                          result4 = [result4, result5, result6];
                        } else {
                          result4 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result4 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result4 = null;
                      pos = clone(pos3);
                    }
                    if (result4 !== null) {
                      result4 = (function(offset, line, column, type, declarations) {
                                return AST.variableDeclaration(type, false, declarations, {line:line, column:column});
                                /*
                              return {
                                type:         "VariableStatement",
                                declarations: declarations
                              };
                              */
                            })(pos2.offset, pos2.line, pos2.column, result4[0], result4[2]);
                    }
                    if (result4 === null) {
                      pos = clone(pos2);
                    }
                    if (result4 === null) {
                      result4 = parse_ExpressionNoIn();
                      result4 = result4 !== null ? result4 : "";
                    }
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 59) {
                          result6 = ";";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\";\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_Expression();
                            result8 = result8 !== null ? result8 : "";
                            if (result8 !== null) {
                              result9 = parse___();
                              if (result9 !== null) {
                                if (input.charCodeAt(pos.offset) === 59) {
                                  result10 = ";";
                                  advance(pos, 1);
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\";\"");
                                  }
                                }
                                if (result10 !== null) {
                                  result11 = parse___();
                                  if (result11 !== null) {
                                    result12 = parse_Expression();
                                    result12 = result12 !== null ? result12 : "";
                                    if (result12 !== null) {
                                      result13 = parse___();
                                      if (result13 !== null) {
                                        if (input.charCodeAt(pos.offset) === 41) {
                                          result14 = ")";
                                          advance(pos, 1);
                                        } else {
                                          result14 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result14 !== null) {
                                          result15 = parse___();
                                          if (result15 !== null) {
                                            result16 = parse_Statement();
                                            if (result16 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, initializer, test, counter, statement) {
                    return AST.forStatement(initializer, test, counter, statement, {line:line, column:column});
                    /*
                  return {
                    type:        "ForStatement",
                    initializer: initializer,
                    test:        test,
                    counter:     counter,
                    statement:   statement
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[4], result0[8], result0[12], result0[16]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ContinueStatement() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ContinueToken();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse_Identifier();
                if (result2 !== null) {
                  result3 = parse_EOS();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, identifier) { return identifier; })(pos2.offset, pos2.line, pos2.column, result2[0]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  pos2 = clone(pos);
                  result2 = parse_EOSNoLineTerminator();
                  if (result2 !== null) {
                    result2 = (function(offset, line, column) { return "";         })(pos2.offset, pos2.line, pos2.column);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, label) {
                    return AST.continueStatement({line:line, column:column});
                    /*
                  return {
                    type:  "ContinueStatement",
                    label: label !== "" ? label : null
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_BreakStatement() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_BreakToken();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse_Identifier();
                if (result2 !== null) {
                  result3 = parse_EOS();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, identifier) { return identifier; })(pos2.offset, pos2.line, pos2.column, result2[0]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  pos2 = clone(pos);
                  result2 = parse_EOSNoLineTerminator();
                  if (result2 !== null) {
                    result2 = (function(offset, line, column) { return ""; })(pos2.offset, pos2.line, pos2.column);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, label) {
                    return AST.breakStatement({line:line, column:column});
                    /*
                  return {
                    type:  "BreakStatement",
                    label: label !== "" ? label : null
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ReturnStatement() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2, pos3;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ReturnToken();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                result2 = parse_Expression();
                if (result2 !== null) {
                  result3 = parse_EOS();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, expression) { return expression; })(pos2.offset, pos2.line, pos2.column, result2[0]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  pos2 = clone(pos);
                  result2 = parse_EOSNoLineTerminator();
                  if (result2 !== null) {
                    result2 = (function(offset, line, column) { return ""; })(pos2.offset, pos2.line, pos2.column);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, value) {
                    return AST.returnStatement(value !== "" ? value : null, {line:line, column:column});
                    /*
                  return {
                    type:  "ReturnStatement",
                    value: value !== "" ? value : null
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SwitchStatement() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_SwitchToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 40) {
                  result2 = "(";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_Expression();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result6 = ")";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_CaseBlock();
                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, expression, clauses) {
                    return AST.switchStatement(expression, clauses, {line:line, column:column});
                    /*
                  return {
                    type:       "SwitchStatement",
                    expression: expression,
                    clauses:    clauses
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[4], result0[8]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_CaseBlock() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 123) {
              result0 = "{";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_CaseClauses();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  pos2 = clone(pos);
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_DefaultClause();
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        result6 = parse_CaseClauses();
                        result6 = result6 !== null ? result6 : "";
                        if (result6 !== null) {
                          result3 = [result3, result4, result5, result6];
                        } else {
                          result3 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result3 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = parse___();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos.offset) === 125) {
                        result5 = "}";
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, before, defaultAndAfter) {
                  var before = before !== null ? before : [];
                  if (defaultAndAfter !== null) {
                    var defaultClause = defaultAndAfter[1];
                    var clausesAfter = defaultAndAfter[3] !== null
                      ? defaultAndAfter[3]
                      : [];
                  } else {
                    var defaultClause = null;
                    var clausesAfter = [];
                  }
            
                  return (defaultClause ? before.concat(defaultClause) : before).concat(clausesAfter);
                })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_CaseClauses() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_CaseClause();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_CaseClause();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_CaseClause();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = [head];
                  for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i][1]);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_CaseClause() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_CaseToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_Expression();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 58) {
                      result4 = ":";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result4 !== null) {
                      pos2 = clone(pos);
                      result5 = parse___();
                      if (result5 !== null) {
                        result6 = parse_StatementList();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                      result5 = result5 !== null ? result5 : "";
                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, selector, statements) {
                    return AST.switchCase(selector, statements, {line:line, column:column});
                    /*
                  return {
                    type:       "CaseClause",
                    selector:   selector,
                    statements: statements !== null ? statements[1] : []
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_DefaultClause() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_DefaultToken();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 58) {
                  result2 = ":";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result2 !== null) {
                  pos2 = clone(pos);
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_StatementList();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, statements) {
                    return AST.switchCase(null, statements, {line:line, column:column});
                    /*
                  return {
                    type:       "DefaultClause",
                    statements: statements !== null ? statements[1] : []
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_LabelledStatement() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_Identifier();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 58) {
                  result2 = ":";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_Statement();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, label, statement) {
                    return AST.labeledStatement(label, statement, {line:line, column:column});
                    /*
                  return {
                    type:      "LabelledStatement",
                    label:     label,
                    statement: statement
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FunctionDeclaration() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_FunctionToken();
            if (result0 === null) {
              result0 = parse_TypeSpecifier();
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_Identifier();
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                      result4 = "(";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        result6 = parse_FormalParameterList();
                        result6 = result6 !== null ? result6 : "";
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            if (input.charCodeAt(pos.offset) === 41) {
                              result8 = ")";
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result8 !== null) {
                              result9 = parse___();
                              if (result9 !== null) {
                                if (input.charCodeAt(pos.offset) === 123) {
                                  result10 = "{";
                                  advance(pos, 1);
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"{\"");
                                  }
                                }
                                if (result10 !== null) {
                                  result11 = parse___();
                                  if (result11 !== null) {
                                    result12 = parse_FunctionBody();
                                    if (result12 !== null) {
                                      result13 = parse___();
                                      if (result13 !== null) {
                                        if (input.charCodeAt(pos.offset) === 125) {
                                          result14 = "}";
                                          advance(pos, 1);
                                        } else {
                                          result14 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (result14 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, retType, name, params, elements) {
                    return AST.functionDeclaration(retType, name, params !== null ? params : [], elements, {line:line, column:column});
                    /*
                  return {
                    type:     "Function",
                    retType: retType,
                    name:     name,
                    params:   params !== null ? params : [],
                    elements: elements
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[6], result0[12]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FunctionExpression() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_FunctionToken();
            if (result0 === null) {
              result0 = parse_TypeSpecifier();
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_Identifier();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                      result4 = "(";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse___();
                      if (result5 !== null) {
                        result6 = parse_FormalParameterList();
                        result6 = result6 !== null ? result6 : "";
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            if (input.charCodeAt(pos.offset) === 41) {
                              result8 = ")";
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result8 !== null) {
                              result9 = parse___();
                              if (result9 !== null) {
                                if (input.charCodeAt(pos.offset) === 123) {
                                  result10 = "{";
                                  advance(pos, 1);
                                } else {
                                  result10 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"{\"");
                                  }
                                }
                                if (result10 !== null) {
                                  result11 = parse___();
                                  if (result11 !== null) {
                                    result12 = parse_FunctionBody();
                                    if (result12 !== null) {
                                      result13 = parse___();
                                      if (result13 !== null) {
                                        if (input.charCodeAt(pos.offset) === 125) {
                                          result14 = "}";
                                          advance(pos, 1);
                                        } else {
                                          result14 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (result14 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, retType, name, params, elements) {
                    return AST.functionDeclaration(retType, name, params !== null ? params : [], elements, {line:line, column:column});
                    /*
                  return {
                    type:     "Function",
                    retType: retType,
                    name:     name,
                    params:   params !== null ? params : [],
                    elements: elements
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[6], result0[12]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FormalParameterList() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_TypeSpecifier();
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_ArrayTypeSpecifier();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result4 = parse_Identifier();
                    if (result4 !== null) {
                      result5 = [];
                      pos2 = clone(pos);
                      result6 = parse___();
                      if (result6 !== null) {
                        if (input.charCodeAt(pos.offset) === 44) {
                          result7 = ",";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result7 !== null) {
                          result8 = parse___();
                          if (result8 !== null) {
                            result9 = parse_TypeSpecifier();
                            if (result9 !== null) {
                              result10 = parse___();
                              if (result10 !== null) {
                                result11 = parse_ArrayTypeSpecifier();
                                result11 = result11 !== null ? result11 : "";
                                if (result11 !== null) {
                                  result12 = parse___();
                                  if (result12 !== null) {
                                    result13 = parse_Identifier();
                                    if (result13 !== null) {
                                      result6 = [result6, result7, result8, result9, result10, result11, result12, result13];
                                    } else {
                                      result6 = null;
                                      pos = clone(pos2);
                                    }
                                  } else {
                                    result6 = null;
                                    pos = clone(pos2);
                                  }
                                } else {
                                  result6 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result6 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result6 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result6 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos2);
                      }
                      while (result6 !== null) {
                        result5.push(result6);
                        pos2 = clone(pos);
                        result6 = parse___();
                        if (result6 !== null) {
                          if (input.charCodeAt(pos.offset) === 44) {
                            result7 = ",";
                            advance(pos, 1);
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                          if (result7 !== null) {
                            result8 = parse___();
                            if (result8 !== null) {
                              result9 = parse_TypeSpecifier();
                              if (result9 !== null) {
                                result10 = parse___();
                                if (result10 !== null) {
                                  result11 = parse_ArrayTypeSpecifier();
                                  result11 = result11 !== null ? result11 : "";
                                  if (result11 !== null) {
                                    result12 = parse___();
                                    if (result12 !== null) {
                                      result13 = parse_Identifier();
                                      if (result13 !== null) {
                                        result6 = [result6, result7, result8, result9, result10, result11, result12, result13];
                                      } else {
                                        result6 = null;
                                        pos = clone(pos2);
                                      }
                                    } else {
                                      result6 = null;
                                      pos = clone(pos2);
                                    }
                                  } else {
                                    result6 = null;
                                    pos = clone(pos2);
                                  }
                                } else {
                                  result6 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result6 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result6 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result6 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos2);
                        }
                      }
                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, headType, arrSpec, head, tail) {
                  /*
                  var result = [{
                     type: headType,
                     name: head,
                     isArray: arrSpec  ? true : false,
                  }];
                  */
                  var declarator = AST.variableDeclarator(name, null, {line:line, column:column});
                  var result = [AST.variableDeclaration(headType, arrSpec ? true:false, [declarator], {line:line, column:column})];
            
                  for (var i = 0; i < tail.length; i++) {
                    var tailDeclarator = AST.variableDeclarator(tail[i][7], null, {line:line, column:column});
                    result.push(AST.variableDeclaration(tail[i][3], tail[i][5] ? true:false, [tailDeclarator], {line:line, column:column}));
                    /*
                    result.push({
                        type:tail[i][3], 
                        name:tail[i][7], 
                        isArray: tail[i][5] ? true : false,
                    });
                    */
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4], result0[5]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_ArrayTypeSpecifier() {
            var result0, result1, result2;
            var pos0, pos1;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 91) {
              result0 = "[";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 93) {
                  result2 = "]";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return true; })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_FunctionBody() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            result0 = parse_SourceElements();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result0 = (function(offset, line, column, elements) { return elements !== null ? elements : []; })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_Program() {
            var result0;
            var pos0;
            
            pos0 = clone(pos);
            result0 = parse_SourceElements();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result0 = (function(offset, line, column, elements) {
                    return AST.program(elements !== null ? elements : [], {line:line, column:column});
                    /*
                  return {
                    type:     "Program",
                    elements: elements !== null ? elements : []
                  };
                  */
                })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          function parse_SourceElements() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_Statement();
            if (result0 !== null) {
              result1 = [];
              pos2 = clone(pos);
              result2 = parse___();
              if (result2 !== null) {
                result3 = parse_Statement();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_Statement();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, head, tail) {
                  var result = [head];
                  for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i][1]);
                  }
                  return result;
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            return result0;
          }
          
          
          function cleanupExpected(expected) {
            expected.sort();
            
            var lastExpected = null;
            var cleanExpected = [];
            for (var i = 0; i < expected.length; i++) {
              if (expected[i] !== lastExpected) {
                cleanExpected.push(expected[i]);
                lastExpected = expected[i];
              }
            }
            return cleanExpected;
          }
          
          
          
          var result = parseFunctions[startRule]();
          
          /*
           * The parser is now in one of the following three states:
           *
           * 1. The parser successfully parsed the whole input.
           *
           *    - |result !== null|
           *    - |pos.offset === input.length|
           *    - |rightmostFailuresExpected| may or may not contain something
           *
           * 2. The parser successfully parsed only a part of the input.
           *
           *    - |result !== null|
           *    - |pos.offset < input.length|
           *    - |rightmostFailuresExpected| may or may not contain something
           *
           * 3. The parser did not successfully parse any part of the input.
           *
           *   - |result === null|
           *   - |pos.offset === 0|
           *   - |rightmostFailuresExpected| contains at least one failure
           *
           * All code following this comment (including called functions) must
           * handle these states.
           */
          if (result === null || pos.offset !== input.length) {
            var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
            var found = offset < input.length ? input.charAt(offset) : null;
            var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
            
            throw new this.SyntaxError(
              cleanupExpected(rightmostFailuresExpected),
              found,
              offset,
              errorPosition.line,
              errorPosition.column
            );
          }
          
          return result;
        },
        
        /* Returns the parser source code. */
        toSource: function() { return this._source; }
      };
      
      /* Thrown when a parser encounters a syntax error. */
      
      result.SyntaxError = function(expected, found, offset, line, column) {
        function buildMessage(expected, found) {
          var expectedHumanized, foundHumanized;
          
          switch (expected.length) {
            case 0:
              expectedHumanized = "end of input";
              break;
            case 1:
              expectedHumanized = expected[0];
              break;
            default:
              expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                + " or "
                + expected[expected.length - 1];
          }
          
          foundHumanized = found ? quote(found) : "end of input";
          
          return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }
        
        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
      };
      
      result.SyntaxError.prototype = Error.prototype;
      
      return result;
    })();


    //====== END OF GENERATED PARSER FILE ======

    return parser;
});